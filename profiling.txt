Timer unit: 1e-06 s

Total time: 0.049451 s
File: /Users/riziotis/ebi/phd/src/mcsa3d/PdbSite.py
Function: fit at line 219

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   219                                               @profile
   220                                               def fit(self, other, cycles=10, transform=False, mutate=True, reorder=True, allow_symmetrics=True, get_index=False):
   221                                                   """Calculates RMSD using the Kabsch algorithm from the rmsd module.
   222                                                   Can also find the optimal atom alignment using the Hungarian algorithm.
   223                                                   See https://github.com/charnley/rmsd for more"""
   224                                                   #p = deepcopy(self)
   225                                                   #q = deepcopy(other)
   226                                           
   227                                                   # TODO check cases where site is fit to reference site.fit(site.reference_structure)
   228                                                   # I get a stack bug, mcsa 1
   229                                           
   230                                                   # In case gaps are present, remove the corresponding residues from both structures
   231        18        295.0     16.4      0.6          gaps = other.get_gaps()
   232                                                   #for gap in sorted(q.get_gaps(), reverse=True):
   233                                                   #    del p.residues[gap]
   234                                                   #    del q.residues[gap]
   235                                                   # Get atom identifier strings and coords as numpy arrays
   236        18       7219.0    401.1     14.6          p_atoms, p_coords = self.get_atom_strings_and_coords(allow_symmetrics, omit=gaps)
   237        18       6524.0    362.4     13.2          q_atoms, q_coords = other.get_atom_strings_and_coords(allow_symmetrics, omit=gaps)
   238        18         14.0      0.8      0.0          q_review = []
   239        18         17.0      0.9      0.0          if len(p_atoms) != len(q_atoms):
   240         1         14.0     14.0      0.0              raise Exception('Atom number mismatch in sites {} and {}'.format(self.id, other.id))
   241                                                   # Initial crude superposition
   242        17       8552.0    503.1     17.3          rot, tran, rms = self._super(p_coords, q_coords, cycles=1)
   243        17        172.0     10.1      0.3          q_temp = PdbSite._transform(q_coords, rot, tran)
   244                                                   # In case of non-conservative mutations, make a pseudo-mutation to
   245                                                   # facilitate superposition
   246        17          9.0      0.5      0.0          if mutate:
   247                                                       for i, (p_atom, q_atom) in enumerate(zip(p_atoms, q_atoms)):
   248                                                           if p_atom != q_atom:
   249                                                               q_atoms[i] = p_atoms[i]
   250                                                   # Reorder atoms using the Hungarian algorithm from rmsd package
   251        17          8.0      0.5      0.0          if reorder:
   252                                                       q_review = rmsd.reorder_hungarian(p_atoms, q_atoms, p_coords, q_temp)
   253                                                       q_coords = q_coords[q_review]
   254                                                       q_atoms = q_atoms[q_review]
   255                                                   # Iterative superposition. Get rotation matrix, translation vector and RMSD
   256        17      20569.0   1209.9     41.6          rot, tran, rms = self._super(p_coords, q_coords, cycles, cutoff=6)
   257        17         22.0      1.3      0.0          if transform:
   258        17       5984.0    352.0     12.1              other.structure.transform(rot, tran)
   259        17         19.0      1.1      0.0              for het in other.nearby_hets:
   260                                                           het.structure.transform(rot, tran)
   261        17         24.0      1.4      0.0          if get_index:
   262                                                       return rot, tran, rms, q_review.tolist()
   263        17          9.0      0.5      0.0          return rot, tran, rms

